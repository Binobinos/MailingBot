from telethon.events import CallbackQuery, NewMessage

from config import user_sessions_deleting, __CallbackQuery, __Message
from main import bot, conn


@bot.on(CallbackQuery(data=b"delete_group"))
async def handle_delete_group(event: __CallbackQuery) -> None:
    user_sessions_deleting[event.sender_id] = {"step": "awaiting_group_username"}
    await event.respond("üì≤ –í–≤–µ–¥–∏—Ç–µ @username –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")


@bot.on(NewMessage(func=lambda event: (user_state := user_sessions_deleting.get(event.sender_id)) and user_state["step"] == "awaiting_group_username"))
async def handle_user_input(event: __Message) -> None:
    group_username = event.text.strip()

    if group_username.startswith("@"):
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM groups WHERE group_username = ?", (group_username,))
        group = cursor.fetchone()

        if group:
            cursor.execute("DELETE FROM groups WHERE group_username = ?", (group_username,))
            conn.commit()
            await event.respond(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        else:
            await event.respond("‚ö† –ì—Ä—É–ø–ø–∞ —Å –∏–º–µ–Ω–µ–º {group_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        user_sessions_deleting.pop(event.sender_id, None)
        cursor.close()
    else:
        await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –≥—Ä—É–ø–ø—ã, –Ω–∞—á–∏–Ω–∞—è —Å '@'.")
        return
