import asyncio
import datetime
import logging
from typing import Union, Optional

from apscheduler.triggers.interval import IntervalTrigger
from telethon import Button, TelegramClient
from telethon.errors import ChatWriteForbiddenError, ChatAdminRequiredError, FloodWaitError, SlowModeWaitError
from telethon.sessions import StringSession
from telethon.tl.types import Channel, Chat

from config import callback_query, callback_message, API_ID, API_HASH, scheduler, Query, bot, conn, \
    New_Message, broadcast_all_state_account
from func.func import gid_key, create_broadcast_data, get_active_broadcast_groups


@bot.on(Query(data=lambda d: d.decode().startswith("broadcast_All_account")))
async def broadcast_all_menu(event: callback_query) -> None:
    keyboard = [
        [Button.inline("‚è≤Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã", f"same_IntervalAll_account")],
        [Button.inline("üé≤ –†–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (25-35)", f"diff_IntervalAll_account")]
    ]
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:", buttons=keyboard)


# ---------- –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(Query(data=lambda d: d.decode().startswith("same_IntervalAll_account")))
async def same_interval_start(event: callback_query) -> None:
    admin_id = event.sender_id
    broadcast_all_state_account[admin_id] = {"mode": "same", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è **–≤—Å–µ—Ö** –≥—Ä—É–ø–ø —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")


# ---------- —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(Query(data=lambda d: d.decode().startswith("diff_IntervalAll_account")))
async def diff_interval_start(event: callback_query) -> None:
    admin_id = event.sender_id
    broadcast_all_state_account[admin_id] = {"mode": "diff", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ—Ç–æ–º —Å–ø—Ä–æ—à—É –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:")


# ---------- –º–∞—Å—Ç–µ—Ä-–¥–∏–∞–ª–æ–≥ (—Ç–µ–∫—Å—Ç ‚Üí –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã) ----------
@bot.on(New_Message(func=lambda e: e.sender_id in broadcast_all_state_account))
async def broadcast_all_dialog(event: callback_message) -> None:
    st = broadcast_all_state_account[event.sender_id]
    print(event, type(event))
    # —à–∞–≥ 1 ‚Äî –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç
    if st["step"] == "text":
        st["text"] = event.text
        if st["mode"] == "same":
            st["step"] = "interval"
            await event.respond("‚è≤Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω—É—Ç—ã, –æ–¥–Ω–æ —á–∏—Å–ª–æ):")
        else:
            st["step"] = "min"
            await event.respond("üî¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if st["mode"] == "same" and st["step"] == "interval":
        try:
            min_time = int(event.text)
        except ValueError:
            await event.respond(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ /start")
            return
        if min_time <= 0:
            await event.respond("‚ö† –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        await schedule_all_accounts_broadcast(st["text"], min_time, None)
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: –∫–∞–∂–¥—ã–µ {min_time} –º–∏–Ω.")
        broadcast_all_state_account.pop(event.sender_id, None)
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 2 (min)
    if st["mode"] == "diff" and st["step"] == "min":
        try:
            st["min"] = int(event.text)
        except ValueError:
            await event.respond(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ /start")
            return
        if st["min"] <= 0:
            await event.respond("‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        st["step"] = "max"
        await event.respond("üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 3 (max) + –∑–∞–ø—É—Å–∫
    if st["mode"] == "diff" and st["step"] == "max":
        try:
            max_m = int(event.text)
        except ValueError:
            await event.respond(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ /start")
            return
        if max_m <= st["min"]:
            await event.respond("‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.")
            return
        await schedule_all_accounts_broadcast(st["text"], st["min"], max_m)
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: —Å–ª—É—á–∞–π–Ω–æ –∫–∞–∂–¥—ã–µ {st['min']}-{max_m} –º–∏–Ω.")
        broadcast_all_state_account.pop(event.sender_id, None)


@bot.on(Query(data=lambda data: data.decode() == "Stop_Broadcast_All_account"))
async def stop_broadcast_all(event: callback_query) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –≥—Ä—É–ø–ø"""
    msg_lines = ["‚õî **–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏**:\n\n"]

    with conn:
        cursor = conn.cursor()
        try:
            sessions = cursor.execute("SELECT user_id, session_string FROM sessions").fetchall()

            for user_id, session_string in sessions:
                async with TelegramClient(StringSession(session_string), API_ID, API_HASH) as client:
                    try:
                        await client.connect()
                        account = await client.get_me()
                        username = getattr(account, 'username', '–±–µ–∑ username')
                        msg_user = [f"**–ê–∫–∫–∞—É–Ω—Ç {username}**:\n"]

                        active_groups = get_active_broadcast_groups(user_id)

                        if not active_groups:
                            msg_user.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.\n")
                            continue

                        for group_id in active_groups:
                            job_id = f"broadcastALL_{user_id}_{gid_key(group_id)}"

                            if scheduler.get_job(job_id):
                                scheduler.remove_job(job_id)
                                cursor.execute(
                                    "UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                    (False, user_id, gid_key(group_id)))
                                msg_user.append(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group_id}** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n")
                            else:
                                msg_user.append(f"‚ö† –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group_id}** –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.\n")

                            msg_lines.extend(msg_user)

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {user_id}: {str(e)}")
                        msg_lines.append(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {user_id}\n")

            await event.respond("".join(msg_lines))

        finally:
            cursor.close()


async def schedule_all_accounts_broadcast(text: str,
                                          min_m: int,
                                          max_m: Optional[int] = None) -> None:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ broadcastALL_<user>_<gid> —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤,
    –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å."""

    with conn:
        cursor = conn.cursor()
        try:
            users = cursor.execute("SELECT user_id, session_string FROM sessions").fetchall()

            for user_id, session_string in users:
                cursor.execute("""UPDATE broadcasts SET broadcast_text = ? WHERE user_id = ?""",
                               (text, user_id))

                async with TelegramClient(StringSession(session_string), API_ID, API_HASH) as client:
                    await client.connect()

                    groups = cursor.execute("""SELECT group_username, group_id FROM groups 
                                            WHERE user_id = ?""", (user_id,)).fetchall()

                    ok_entities: list[Channel | Chat] = []
                    for group_username, group_id in groups:
                        try:
                            ent = await client.get_entity(group_username)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
                            if not isinstance(ent, (Channel, Chat)):
                                logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {ent} - –Ω–µ —á–∞—Ç/–∫–∞–Ω–∞–ª")
                                continue

                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã-–≤–∏—Ç—Ä–∏–Ω—ã
                            if isinstance(ent, Channel) and ent.broadcast and not ent.megagroup:
                                logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {ent} - –≤–∏—Ç—Ä–∏–Ω–∞-–∫–∞–Ω–∞–ª")
                                continue

                            ok_entities.append(ent)
                        except Exception as error:
                            logging.warning(f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {group_username}: {error}")
                            continue

                    if not ok_entities:
                        continue

                    total_entities = len(ok_entities)
                    sec_run = ((max_m - min_m) / total_entities) if max_m else min_m
                    current_time = sec_run

                    for ent in ok_entities:
                        job_id = f"broadcastALL_{user_id}_{gid_key(ent.id)}"
                        interval = ((max_m - min_m) / total_entities) if max_m else min_m

                        create_broadcast_data(user_id, gid_key(ent.id), text, interval)

                        if scheduler.get_job(job_id):
                            scheduler.remove_job(job_id)

                        async def send_message(
                                ss: str = session_string,
                                entity: Union[Channel, Chat] = ent,
                                jobs_id: str = job_id,
                                start_text: str = text,
                                max_retries: int = 10
                        ) -> None:
                            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
                            retry_count = 0

                            while retry_count < max_retries:
                                try:
                                    async with TelegramClient(StringSession(ss), API_ID, API_HASH) as client:
                                        async with conn:
                                            cursor = conn.cursor()
                                            cursor.execute("""SELECT broadcast_text FROM broadcasts 
                                                            WHERE group_id = ? AND user_id = ?""",
                                                           (entity.id, user_id))
                                            txt = cursor.fetchone()
                                            txt = txt[0] if txt else start_text

                                            await client.send_message(entity, txt)
                                            logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {entity.title}")

                                            cursor.execute("""INSERT INTO send_history 
                                                            (user_id, group_id, group_name, sent_at, message_text) 
                                                            VALUES (?, ?, ?, ?, ?)""",
                                                           (user_id, entity.id, getattr(entity, 'title', ''),
                                                            datetime.datetime.now().isoformat(), txt))
                                except (ChatWriteForbiddenError, ChatAdminRequiredError) as e:
                                    logging.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –ø–∏—Å–∞—Ç—å –≤ {entity.title}: {e}")
                                    break
                                except (FloodWaitError, SlowModeWaitError) as e:
                                    wait_time = e.seconds
                                    logging.warning(f"{type(e).__name__}: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫.")
                                    await asyncio.sleep(wait_time + 10)
                                    retry_count += 1
                                except Exception as e:
                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {entity.title}: {type(e).__name__}: {e}")
                                    retry_count += 1
                                    await asyncio.sleep(5)
                                else:
                                    return

                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {entity.title} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                            async with conn:
                                cursor = conn.cursor()
                                cursor.execute("""UPDATE broadcasts 
                                                SET is_active = ? 
                                                WHERE user_id = ? AND group_id = ?""",
                                               (False, user_id, entity.id))
                                if scheduler.get_job(jobs_id):
                                    scheduler.remove_job(jobs_id)

                        base = (min_m + max_m) // 2 if max_m else min_m
                        jitter = (max_m - min_m) * 60 // 2 if max_m else min_m * 30
                        trigger = IntervalTrigger(minutes=base, jitter=jitter)
                        next_run = datetime.datetime.now() + datetime.timedelta(minutes=current_time)

                        logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è {ent.title} –Ω–∞ {next_run.isoformat()}")
                        scheduler.add_job(
                            send_message,
                            trigger,
                            id=job_id,
                            next_run_time=next_run,
                            replace_existing=True,
                        )
                        current_time += sec_run
        finally:
            cursor.close()

    if not scheduler.running:
        logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")
        scheduler.start()
