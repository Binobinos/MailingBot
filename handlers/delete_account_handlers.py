import logging

from config import callback_query, callback_message, user_sessions_phone, Query
from main import bot, conn


@bot.on(Query(data=b"delete_account"))
async def handle_delete_account(event: callback_query) -> None:
    user_sessions_phone[event.sender_id] = {"step": "awaiting_phone"}
    await event.respond("üì≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")


@bot.on(Query(func=lambda event: (user_state := user_sessions_phone.get(event.sender_id)) and user_state[
    "step"] == "awaiting_phone"))
async def handle_user_input(event: callback_message):
    phone_number = event.text.strip()
    if phone_number.startswith("+") and phone_number[1:].isdigit():
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM sessions WHERE session_string = ?", (phone_number,))
        user = cursor.fetchone()

        if user:
            cursor.execute("DELETE FROM sessions WHERE session_string = ?", (phone_number,))
            conn.commit()
            logging.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            await event.respond(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            logging.warning(f"–ê–∫–∫–∞—É–Ω—Ç {user} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await event.respond("‚ö† –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        user_sessions_phone.pop(event.sender_id, None)
        cursor.close()
    else:
        logging.error(f"–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
        await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å '+'.")
