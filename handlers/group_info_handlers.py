import logging
import sqlite3

from telethon import Button, TelegramClient
from telethon.sessions import StringSession

from config import callback_query, API_ID, API_HASH, broadcast_all_text, scheduler, Query
from func.func import get_active_broadcast_groups, gid_key
from main import bot, conn


@bot.on(Query(data=lambda data: data.decode().startswith("listOfgroups_")))
async def handle_groups_list(event: callback_query) -> None:
    user_id = int(event.data.decode().split("_")[1])
    cursor = conn.cursor()
    row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    try:
        dialogs = cursor.execute("SELECT group_id, group_username FROM groups WHERE user_id = ?", (user_id,))
        active = get_active_broadcast_groups(user_id)

        buttons = []
        for dialog in dialogs:
            print(dialog)
            buttons.append(
                [Button.inline(f"{"‚úÖ" if dialog[0] in active else "‚ùå"} {dialog[1]}",
                               f"group_info_{user_id}_{gid_key(dialog[0])}")]
            )
        cursor.close()
        if not buttons:
            await event.respond("–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
            return

        await event.respond("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ:", buttons=buttons)
    finally:
        await client.disconnect()


# ---------- –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã ----------
@bot.on(Query(data=lambda data: data.decode().startswith("group_info_")))
async def handle_group_info(event: callback_query) -> None:
    # –≤ callback-–¥–∞–Ω–Ω—ã—Ö: group_info_<user_id>_<group_id>
    data: str = event.data.decode().split("_")
    user_id: int = int(data[2])
    group_id: int = int(data[3])

    cursor: sqlite3.Cursor = conn.cursor()
    row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string: str = row[0]
    client: TelegramClient = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    account_name: str = "–ë–µ–∑ –∏–º–µ–Ω–∏"
    group_name: str = "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"
    try:
        cursor.execute(
            "SELECT group_username FROM groups WHERE user_id = ? AND group_id = ?",
            (user_id, group_id)
        )
        group_row = cursor.fetchone()
        if group_row:
            ent = await client.get_entity(group_row[0])
            group_name = ent.title
    except Exception as error:
        logging.error(f"–û—à–∏–±–∫–∞ {error}")
    try:
        account_name = (await client.get_me()).first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    except ValueError:
        logging.info(f"–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —É –∞–∫–∫–∞—É–Ω—Ç–∞")
    finally:
        await client.disconnect()

    # --- –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ---
    cursor.execute("""SELECT broadcast_text, interval_minutes FROM broadcasts WHERE user_id = ? AND group_id = ?""",
                   (user_id, gid_key(group_id)))
    broadcast_data = cursor.fetchone()
    cursor.close()
    # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º job-—ã –≤ APScheduler ---
    jid_one = f"broadcast_{user_id}_{gid_key(group_id)}"
    jid_all = f"broadcastALL_{user_id}_{gid_key(group_id)}"

    has_one = scheduler.get_job(jid_one)
    has_all = scheduler.get_job(jid_all)

    # ---------- —Å—Ç–∞—Ç—É—Å ----------
    if has_one:
        status = "‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è"
    elif has_all:
        status = "‚úÖ –ú–∞—Å—Å–æ–≤–∞—è"
    else:
        status = "‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    # ---------- —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –±–ª–æ–∫–µ ¬´–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç¬ª ----------
    if has_all:
        txt = broadcast_all_text.get((user_id, gid_key(group_id)), "‚Äî")
        text_display = f"üì© **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (–º–∞—Å—Å–æ–≤–∞—è):**\n{txt}"
    elif broadcast_data:
        broadcast_text, interval_minutes = broadcast_data
        text_display = (
            f"üì© **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n{broadcast_text}\n"
            f"‚è≥ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {interval_minutes} –º–∏–Ω—É—Ç"
        )
    else:
        text_display = (
            "üì© **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:** ‚ùå –ù–µ –∑–∞–¥–∞–Ω\n"
            "‚è≥ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** ‚ùå –ù–µ –∑–∞–¥–∞–Ω"
        )

    # ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ----------
    keyboard = [
        [Button.inline("üìù –¢–µ–∫—Å—Ç –∏ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏",
                       f"BroadcastTextInterval_{user_id}_{gid_key(group_id)}")],
        [Button.inline("‚úÖ –ù–∞—á–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                       f"StartResumeBroadcast_{user_id}_{gid_key(group_id)}")],
        [Button.inline("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                       f"StopAccountBroadcast_{user_id}_{gid_key(group_id)}")]
    ]

    # ---------- –æ—Ç–≤–µ—Ç ----------
    await event.respond(
        f"üì¢ **–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} "
        f"–æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}:**\n\n"
        f"{text_display}\n"
        f"üü¢ **–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:** {status}",
        buttons=keyboard
    )
