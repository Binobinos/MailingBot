import asyncio
import datetime
import logging
from typing import Union

from apscheduler.triggers.interval import IntervalTrigger
from telethon import Button, TelegramClient
from telethon.errors import ChatWriteForbiddenError, ChatAdminRequiredError, FloodWaitError, SlowModeWaitError
from telethon.sessions import StringSession
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.types import Channel, Chat

from config import callback_query, callback_message, broadcast_all_state, API_ID, API_HASH, scheduler, Query, bot, conn, \
    New_Message
from func.func import gid_key, create_broadcast_data, get_active_broadcast_groups


@bot.on(Query(data=lambda d: d.decode().startswith("broadcastAll_")))
async def broadcast_all_menu(event: callback_query) -> None:
    admin_id = event.sender_id
    target_user_id = int(event.data.decode().split("_")[1])
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —à–ª—ë–º
    broadcast_all_state[admin_id] = {"user_id": target_user_id}

    keyboard = [
        [Button.inline("‚è≤Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã", f"sameIntervalAll_{target_user_id}")],
        [Button.inline("üé≤ –†–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (25-35)", f"diffIntervalAll_{target_user_id}")]
    ]
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:", buttons=keyboard)


# ---------- –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(Query(data=lambda d: d.decode().startswith("sameIntervalAll_")))
async def same_interval_start(event: callback_query) -> None:
    admin_id = event.sender_id
    uid = int(event.data.decode().split("_")[1])
    broadcast_all_state[admin_id] = {"user_id": uid, "mode": "same", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è **–≤—Å–µ—Ö** –≥—Ä—É–ø–ø —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")


# ---------- —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(Query(data=lambda d: d.decode().startswith("diffIntervalAll_")))
async def diff_interval_start(event: callback_query) -> None:
    admin_id = event.sender_id
    uid = int(event.data.decode().split("_")[1])
    broadcast_all_state[admin_id] = {"user_id": uid, "mode": "diff", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ—Ç–æ–º —Å–ø—Ä–æ—à—É –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:")


# ---------- –º–∞—Å—Ç–µ—Ä-–¥–∏–∞–ª–æ–≥ (—Ç–µ–∫—Å—Ç ‚Üí –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã) ----------
@bot.on(New_Message(func=lambda e: e.sender_id in broadcast_all_state))
async def broadcast_all_dialog(event: callback_message) -> None:
    st = broadcast_all_state[event.sender_id]
    print(event, type(event))
    # —à–∞–≥ 1 ‚Äî –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç
    if st["step"] == "text":
        st["text"] = event.text
        if st["mode"] == "same":
            st["step"] = "interval"
            await event.respond("‚è≤Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω—É—Ç—ã, –æ–¥–Ω–æ —á–∏—Å–ª–æ):")
        else:
            st["step"] = "min"
            await event.respond("üî¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if st["mode"] == "same" and st["step"] == "interval":
        try:
            min_time = int(event.text)
        except ValueError:
            await event.respond(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ /start")
            return
        if min_time <= 0:
            await event.respond("‚ö† –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        await schedule_account_broadcast(int(st["user_id"]), st["text"], min_time, None)
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: –∫–∞–∂–¥—ã–µ {min_time} –º–∏–Ω.")
        broadcast_all_state.pop(event.sender_id, None)
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 2 (min)
    if st["mode"] == "diff" and st["step"] == "min":
        try:
            st["min"] = int(event.text)
        except ValueError:
            await event.respond(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ /start")
            return
        if st["min"] <= 0:
            await event.respond("‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        st["step"] = "max"
        await event.respond("üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 3 (max) + –∑–∞–ø—É—Å–∫
    if st["mode"] == "diff" and st["step"] == "max":
        try:
            max_m = int(event.text)
        except ValueError:
            await event.respond(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ /start")
            return
        if max_m <= st["min"]:
            await event.respond("‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.")
            return
        await schedule_account_broadcast(st["user_id"], st["text"], st["min"], max_m)
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: —Å–ª—É—á–∞–π–Ω–æ –∫–∞–∂–¥—ã–µ {st['min']}-{max_m} –º–∏–Ω.")
        broadcast_all_state.pop(event.sender_id, None)


@bot.on(Query(data=lambda data: data.decode().startswith("StopBroadcastAll_")))
async def stop_broadcast_all(event: callback_query) -> None:
    data = event.data.decode()
    try:
        user_id = int(data.split("_")[1])
    except ValueError as e:
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_id –∏ group_id: {e}")
        return
    cursor = conn.cursor()
    msg = ["‚õî **–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏**:\n\n"]
    for group_ in get_active_broadcast_groups(user_id):
        job_id = f"broadcastALL_{user_id}_{gid_key(group_)}"
        if scheduler.get_job(job_id):
            logging.info(f"–†–∞–±–æ—Ç–∞ {job_id} –Ω–∞–π–¥–µ–Ω–∞")
            scheduler.remove_job(job_id)
            cursor.execute("UPDATE broadcasts SET is_active = ? WHERE group_id = ?",
                           (False, gid_key(group_)))
            conn.commit()
            msg.append(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group_}** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            logging.info(f"–†–∞–±–æ—Ç–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            msg.append(f"‚ö† –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group_}** –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    await event.respond("\n".join(msg))
    cursor.close()


async def schedule_account_broadcast(user_id: int,
                                     text: str,
                                     min_m: int,
                                     max_m: Union[int] = None) -> None:
    """–°—Ç–∞–≤–∏—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç jobs broadcastALL_<user>_<gid> —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤,
    –∫—É–¥–∞ –∞–∫–∫–∞—É–Ω—Ç —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å."""
    # --- —Å–µ—Å—Å–∏—è ---
    cursor = conn.cursor()
    row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    cursor.execute("""UPDATE broadcasts SET broadcast_text = ? WHERE user_id = ?""", (text, user_id))
    if not row:
        return
    sess_str = row[0]

    client = TelegramClient(StringSession(sess_str), API_ID, API_HASH)
    await client.connect()

    # --- —Å–æ–±–∏—Ä–∞–µ–º ¬´—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ¬ª —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã ---
    groups = cursor.execute("""SELECT group_username, group_id FROM groups WHERE user_id = ?""", (user_id,))
    ok_entities: list[Channel | Chat] = []
    for group in groups:
        ent = await client.get_entity(group[0])
        try:
            if not isinstance(ent, (Channel, Chat)):
                logging.info(f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {ent} —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –õ–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –±–æ—Ç")
                continue
            if isinstance(ent, Channel) and ent.broadcast and not ent.megagroup:
                logging.info(f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {ent} —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –≤–∏—Ç—Ä–∏–Ω–∞-–∫–∞–Ω–∞–ª")
                continue
        except Exception as error:
            logging.warning(f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {error}")
            continue
        ok_entities.append(ent)

    if not ok_entities:
        print()
        logging.info(f"–ù–µ—Ç—É –∑–∞–¥–∞—á –≤—ã—Ö–æ–¥–∏–º")
        return

    sec_run = (((max_m - min_m) / len(ok_entities)) if max_m else min_m)
    current_time = sec_run
    for ent in ok_entities:
        logging.debug(ent)
        job_id = f"broadcastALL_{user_id}_{gid_key(ent.id)}"
        create_broadcast_data(user_id, gid_key(ent.id), text,
                              (((max_m - min_m) / len(ok_entities)) if max_m else min_m))
        if scheduler.get_job(job_id):
            logging.info(f"–£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É")
            scheduler.remove_job(job_id)

        async def send_message(
                ss: str = sess_str,
                entity: Union[Channel, Chat] = ent,
                jobs_id: str = job_id,
                start_text: str = text,
                max_retries: int = 10
        ) -> None:
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
            retry_count = 0
            cursor = None

            while retry_count < max_retries:
                try:
                    async with TelegramClient(StringSession(ss), API_ID, API_HASH) as client:
                        cursor = conn.cursor()

                        cursor.execute("""SELECT broadcast_text FROM broadcasts 
                                        WHERE group_id = ? AND user_id = ?""",
                                       (entity.id, user_id))
                        txt = cursor.fetchone()
                        txt = txt[0] if txt else start_text

                        await client.send_message(entity, txt)
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {txt} –≤ {entity.title} (@{entity.username})")

                        cursor.execute("""INSERT INTO send_history 
                                        (user_id, group_id, group_name, sent_at, message_text) 
                                        VALUES (?, ?, ?, ?, ?)""",
                                       (user_id,
                                        entity.id,
                                        getattr(entity, 'title', ''),
                                        datetime.datetime.now().isoformat(),
                                        txt))
                        conn.commit()
                        return

                except (ChatWriteForbiddenError, ChatAdminRequiredError) as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {entity.title} –Ω–µ—Ç –ø—Ä–∞–≤ –ø–∏—Å–∞—Ç—å: {e} {type(e)}")
                    retry_count += 1
                except (FloodWaitError, SlowModeWaitError) as e:
                    wait_time = e.seconds
                    logging.warning(f"{type(e)}: –∂–¥–µ–º {wait_time} —Å–µ–∫. (–ü–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries})")
                    await asyncio.sleep(wait_time + 10)
                    retry_count += 1

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {entity.title}: {e} {type(e)}")
                    retry_count += 1
                    await asyncio.sleep(5)

                finally:
                    if cursor:
                        cursor.close()

            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {entity.title} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
            cursor = conn.cursor()
            try:
                cursor.execute("""UPDATE broadcasts 
                                 SET is_active = ? 
                                 WHERE user_id = ? AND group_id = ?""",
                               (False, user_id, entity.id))
                conn.commit()
                if scheduler.get_job(jobs_id):
                    scheduler.remove_job(jobs_id)
            finally:
                cursor.close()

        base = (min_m + max_m) // 2 if max_m else min_m
        jitter = (max_m - min_m) * 60 // 2 if max_m else 0
        trigger = IntervalTrigger(minutes=base, jitter=jitter)
        next_run = datetime.datetime.now() + datetime.timedelta(minutes=current_time)
        logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {ent.title} –≤ {next_run.isoformat()}")
        scheduler.print_jobs()
        scheduler.add_job(
            send_message,
            trigger,
            id=job_id,
            next_run_time=next_run,
            replace_existing=True,
        )
        current_time += sec_run
    if not scheduler.running:
        logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏")
        scheduler.start()

    await client.disconnect()
    if not ok_entities:
        return
