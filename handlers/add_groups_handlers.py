from sqlite3 import IntegrityError

from config import callback_query, callback_message, user_sessions, New_Message, Query, bot, conn


@bot.on(Query(data=b"add_groups"))
async def manage_groups(event: callback_query) -> None:
    user_sessions[event.sender_id] = {"step": "awaiting_group_username"}
    await event.respond("üì≤ –ù–∞–ø–∏—à–∏—Ç–µ @username –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")


@bot.on(New_Message(func=lambda event: (user_state := user_sessions.pop(event.sender_id, None)) and user_state[
    "step"] == "awaiting_group_username"))
async def handle_group_input(event: callback_message) -> None:
    group_username: str = event.text.strip()

    if group_username.startswith("@") and " " not in group_username:
        cursor = conn.cursor()
        try:
            ids = await bot.get_entity(group_username)
            cursor.execute("INSERT INTO pre_groups (group_username, group_id) VALUES (?, ?)",
                           (group_username, ids.id))
            conn.commit()
            await event.respond(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        except IntegrityError:
            await event.respond("‚ö† –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            cursor.close()
    else:
        await event.respond("‚ö† –û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É.")
