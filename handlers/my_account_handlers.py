from telethon import Button, TelegramClient
from telethon.sessions import StringSession

from config import callback_query, API_ID, API_HASH, Query, bot, conn
from func.func import get_active_broadcast_groups, broadcast_status_emoji


@bot.on(Query(data=b"my_accounts"))
async def my_accounts(event: callback_query) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    cursor = conn.cursor()
    buttons = []
    for user_id, session_string in cursor.execute("SELECT user_id, session_string FROM sessions"):
        session = StringSession(session_string)
        client = TelegramClient(session, API_ID, API_HASH)
        await client.connect()
        print(await client.get_me())
        try:
            me = await client.get_me()
            username = me.first_name if me.first_name else "–ë–µ–∑ –Ω–∏–∫–∞"
            buttons.append([Button.inline(f"üë§ {username}", f"account_info_{user_id}")])
        except Exception as e:
            buttons.append([Button.inline(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {e}", f"error_{user_id}")])
        finally:
            await client.disconnect()
    await event.respond("üì± **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:**", buttons=buttons)


@bot.on(Query(data=lambda data: data.decode().startswith("account_info_")))
async def handle_account_button(event: callback_query) -> None:
    user_id = int(event.data.decode().split("_")[2])
    cursor = conn.cursor()
    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    try:
        me = await client.get_me()
        username = me.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        phone = me.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        groups = cursor.execute("SELECT group_id, group_username FROM groups WHERE user_id = ?", (user_id,))

        active_gids = get_active_broadcast_groups(user_id)
        lines = []
        for group in groups:
            lines.append(f"{broadcast_status_emoji(user_id, int(group[0]))} {group[1]}")
        group_list = "\n".join(lines)
        if not group_list:
            group_list = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø."

        mass_active = "üü¢ –í–ö–õ" if active_gids else "üî¥ –í–´–ö–õ"
        buttons = [
            [
                Button.inline("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", f"listOfgroups_{user_id}")
            ],
            [Button.inline("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ —á–∞—Ç—ã", f"broadcastAll_{user_id}"),
             Button.inline("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É", f"StopBroadcastAll_{user_id}")],
            [Button.inline("‚úî –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö", f"add_all_groups_{user_id}", )],
            [Button.inline("‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç", f"delete_account_{user_id}")]
        ]

        await event.respond(
            f"üì¢ **–ú–µ–Ω—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}:**\n"
            f"üöÄ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:** {mass_active}\n\n"
            f"üìå **–ò–º—è:** {username}\n"
            f"üìû **–ù–æ–º–µ—Ä:** `+{phone}`\n\n"
            f"üìù **–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:**\n{group_list}",
            buttons=buttons
        )
    finally:
        await client.disconnect()
        cursor.close()
