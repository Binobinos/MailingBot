import logging
import sqlite3
from telethon import TelegramClient, events, Button
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Channel, Chat          #  ‚Üê –î–û–ë–ê–í–ò–õ–ò
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR
from dotenv import load_dotenv
import os
import random
from datetime import datetime

def gid_key(value: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç abs(id).  –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø (-100...) –∏ –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ ¬´–∫–ª—é—á¬ª."""
    return abs(value)

def broadcast_status_emoji(user_id: int, group_id: int) -> str:
    key = gid_key(group_id)
    jid_one = f"broadcast_{user_id}_{key}"
    jid_all = f"broadcastALL_{user_id}_{key}"
    return "‚úÖ" if scheduler.get_job(jid_one) or scheduler.get_job(jid_all) else "‚ùå"

def get_active_broadcast_groups(user_id: int) -> set[int]:
    active = set()
    for job in scheduler.get_jobs():
        if job.id.startswith(f"broadcastALL_{user_id}_"):
            try:
                gid_raw = int(job.id.split("_")[2])
                active.add(gid_key(gid_raw))
            except (IndexError, ValueError):
                continue
    return active




load_dotenv()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

broadcast_all_state = {}      # key = admin_id -> —à–∞–≥–∏ –º–∞—Å—Ç–µ—Ä–∞

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã, –∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º broadcastALL
broadcast_all_text = {}        # key = (user_id, group_id) -> text



scheduler = AsyncIOScheduler()

conn = sqlite3.connect("sessions.db")
cursor = conn.cursor()

cursor.execute("CREATE TABLE IF NOT EXISTS groups (group_id INTEGER PRIMARY KEY AUTOINCREMENT, group_username TEXT UNIQUE)")
cursor.execute("CREATE TABLE IF NOT EXISTS sessions (user_id INTEGER PRIMARY KEY, session_string TEXT)")
cursor.execute("CREATE TABLE IF NOT EXISTS broadcasts ( id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, group_id INTEGER, session_string TEXT, broadcast_text TEXT, interval_minutes INTEGER, is_active BOOLEAN,FOREIGN KEY (user_id) REFERENCES users(id),FOREIGN KEY (group_id) REFERENCES groups(id));")
conn.commit()

bot = TelegramClient("bot", API_ID, API_HASH).start(bot_token=BOT_TOKEN)

auto_client = TelegramClient(StringSession(), API_ID, API_HASH)

@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    if event.sender_id == ADMIN_ID:
        buttons = [
            [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", b"add_account")],
            [Button.inline("üì¢ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—ã", b"groups")],
            [Button.inline("üë§ –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã", b"my_accounts")],
            [Button.inline("üìë –ú–æ–∏ –≥—Ä—É–ø–ø—ã", b"my_groups")]
        ]
        await event.respond("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω!", buttons=buttons)
    else:
        await event.respond("‚õî –ó–∞–ø—Ä–µ—â–µ–Ω–æ!")

phone_waiting = {}
code_waiting = {}
password_waiting = {}
user_clients = {}

client = TelegramClient(StringSession(), API_ID, API_HASH)

@bot.on(events.CallbackQuery(data=b"add_account"))
async def add_account(event):
    user_id = event.sender_id
    phone_waiting[user_id] = True
    await event.respond("üì≤ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `+380668887766`")

@bot.on(events.NewMessage(func=lambda e: e.sender_id in phone_waiting and e.text.startswith("+") and e.text[1:].isdigit()))
async def get_phone(event):
    user_id = event.sender_id
    phone_number = event.text.strip()

    user_clients[user_id] = TelegramClient(StringSession(), API_ID, API_HASH)
    await user_clients[user_id].connect()

    await event.respond("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")

    try:
        await user_clients[user_id].send_code_request(phone_number)
        code_waiting[user_id] = phone_number
        del phone_waiting[user_id]
        await event.respond("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞:")
    except Exception as e:
        phone_waiting.pop(user_id, None)
        user_clients.pop(user_id, None)
        await event.respond(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")

@bot.on(events.NewMessage(func=lambda e: e.sender_id in code_waiting and e.text.isdigit() and e.sender_id not in broadcast_all_state))
async def get_code(event):
    code = event.text.strip()
    user_id = event.sender_id
    phone_number = code_waiting[user_id]

    try:
        await user_clients[user_id].sign_in(phone_number, code)
        session_string = user_clients[user_id].session.save()
        me = await user_clients[user_id].get_me()

        cursor.execute("INSERT INTO sessions (user_id, session_string) VALUES (?, ?)", (me.id, session_string))
        conn.commit()

        del code_waiting[user_id]
        del user_clients[user_id]
        await event.respond("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    except SessionPasswordNeededError:
        password_waiting[user_id] = {"waiting": True, "last_message_id": event.message.id}
        await event.respond("‚ö† –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å:")
    except Exception as e:
        del code_waiting[user_id]
        user_clients.pop(user_id, None)
        await event.respond(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")

@bot.on(events.NewMessage(func=lambda e: e.sender_id in password_waiting and e.sender_id not in user_states and e.sender_id not in broadcast_all_state))
async def get_password(event):
    user_id = event.sender_id

    if password_waiting[user_id]["waiting"] and event.message.id > password_waiting[user_id]["last_message_id"]:
        password = event.text.strip()
        try:
            await user_clients[user_id].sign_in(password=password)
            me = await user_clients[user_id].get_me()
            session_string = user_clients[user_id].session.save()

            cursor.execute("INSERT INTO sessions (user_id, session_string) VALUES (?, ?)", (me.id, session_string))
            conn.commit()

            del password_waiting[user_id]
            del user_clients[user_id]
            await event.respond("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")

user_sessions_account_spam = {}
active_spam = {}

active_broadcasts = {}

@bot.on(events.CallbackQuery(data=b"my_accounts"))
async def my_accounts(event):
    cursor.execute("SELECT user_id, session_string FROM sessions")
    accounts = cursor.fetchall()

    if not accounts:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    buttons = []
    for user_id, session_string in accounts:
        session = StringSession(session_string)
        client = TelegramClient(session, API_ID, API_HASH)
        await client.connect()
        try:
            me = await client.get_me()
            username = me.first_name if me.first_name else "–ë–µ–∑ –Ω–∏–∫–∞"
            buttons.append([Button.inline(f"üë§ {username}", f"account_info_{user_id}")])
        except Exception as e:
            buttons.append([Button.inline(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞", f"error_{user_id}")])

    await event.respond("üì± **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:**", buttons=buttons)

@bot.on(events.CallbackQuery(data=lambda data: data.decode().startswith("account_info_")))
async def handle_account_button(event):
    user_id = int(event.data.decode().split("_")[2])

    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    try:
        me       = await client.get_me()
        username = me.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        phone    = me.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"

        dialogs  = await client.get_dialogs()
        groups   = [d for d in dialogs if d.is_group]

        active_gids = get_active_broadcast_groups(user_id)

        if groups:
            lines = [
                f"{'‚úÖ' if gid_key(g.id) in active_gids else '‚ùå'} {g.name}"
                for g in groups
            ]
            group_list = "\n".join(lines)
        else:
            group_list = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø."

        mass_active = "üü¢ –í–ö–õ" if active_gids else "üî¥ –í–´–ö–õ"


        buttons = [
            [
                Button.inline("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", f"listOfgroups_{user_id}"),
                Button.inline("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ —á–∞—Ç—ã", f"broadcastAll_{user_id}")
            ]
        ]

        await event.respond(
            f"üì¢ **–ú–µ–Ω—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}:**\n"
            f"üöÄ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:** {mass_active}\n\n"
            f"üìå **–ò–º—è:** {username}\n"
            f"üìû **–ù–æ–º–µ—Ä:** `+{phone}`\n\n"
            f"üìù **–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:**\n{group_list}",
            buttons=buttons
        )
    finally:
        await client.disconnect()



# ---------- –ú–ï–ù–Æ ¬´–†–∞—Å—Å—ã–ª–∫–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã¬ª ----------
@bot.on(events.CallbackQuery(data=lambda d: d.decode().startswith("broadcastAll_")))
async def broadcast_all_menu(event):
    admin_id = event.sender_id
    target_user_id = int(event.data.decode().split("_")[1])
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —à–ª—ë–º
    broadcast_all_state[admin_id] = {"user_id": target_user_id}

    keyboard = [
        [Button.inline("‚è≤Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã", f"sameIntervalAll_{target_user_id}")],
        [Button.inline("üé≤ –†–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (25-35)", f"diffIntervalAll_{target_user_id}")]
    ]
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:", buttons=keyboard)


# ---------- –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(events.CallbackQuery(data=lambda d: d.decode().startswith("sameIntervalAll_")))
async def same_interval_start(event):
    admin_id = event.sender_id
    uid = int(event.data.decode().split("_")[1])
    broadcast_all_state[admin_id] = {"user_id": uid, "mode": "same", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è **–≤—Å–µ—Ö** –≥—Ä—É–ø–ø —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")


# ---------- —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(events.CallbackQuery(data=lambda d: d.decode().startswith("diffIntervalAll_")))
async def diff_interval_start(event):
    admin_id = event.sender_id
    uid = int(event.data.decode().split("_")[1])
    broadcast_all_state[admin_id] = {"user_id": uid, "mode": "diff", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ—Ç–æ–º —Å–ø—Ä–æ—à—É –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:")


# ---------- –º–∞—Å—Ç–µ—Ä-–¥–∏–∞–ª–æ–≥ (—Ç–µ–∫—Å—Ç ‚Üí –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã) ----------
@bot.on(events.NewMessage(func=lambda e: e.sender_id in broadcast_all_state))
async def broadcast_all_dialog(event):
    st = broadcast_all_state[event.sender_id]

    # —à–∞–≥ 1 ‚Äî –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç
    if st["step"] == "text":
        st["text"] = event.text
        if st["mode"] == "same":
            st["step"] = "interval"
            await event.respond("‚è≤Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω—É—Ç—ã, –æ–¥–Ω–æ —á–∏—Å–ª–æ):")
        else:
            st["step"] = "min"
            await event.respond("üî¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if st["mode"] == "same" and st["step"] == "interval":
        try:
            mins = int(event.text)
            if mins <= 0:
                raise ValueError
        except ValueError:
            await event.respond("‚ö† –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        await schedule_account_broadcast(st["user_id"], st["text"], mins, None)
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: –∫–∞–∂–¥—ã–µ {mins} –º–∏–Ω.")
        broadcast_all_state.pop(event.sender_id, None)
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 2 (min)
    if st["mode"] == "diff" and st["step"] == "min":
        try:
            st["min"] = int(event.text)
            if st["min"] <= 0:
                raise ValueError
        except ValueError:
            await event.respond("‚ö† –ß–∏—Å–ª–æ > 0.")
            return
        st["step"] = "max"
        await event.respond("üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 3 (max) + –∑–∞–ø—É—Å–∫
    if st["mode"] == "diff" and st["step"] == "max":
        try:
            max_m = int(event.text)
            if max_m <= st["min"]:
                raise ValueError
        except ValueError:
            await event.respond("‚ö† –ú–∞–∫—Å–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º—É–º–∞.")
            return
        await schedule_account_broadcast(st["user_id"], st["text"], st["min"], max_m)
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: —Å–ª—É—á–∞–π–Ω–æ –∫–∞–∂–¥—ã–µ {st['min']}-{max_m} –º–∏–Ω.")
        broadcast_all_state.pop(event.sender_id, None)

@bot.on(events.CallbackQuery(data=lambda data: data.decode().startswith("listOfgroups_")))
async def handle_groups_list(event):
    user_id = int(event.data.decode().split("_")[1])

    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    try:
        dialogs = await client.get_dialogs()
        active  = get_active_broadcast_groups(user_id)

        buttons = []
        for d in dialogs:
            if d.is_group:
                mark = "‚úÖ" if gid_key(d.id) in active else "‚ùå"
                buttons.append(
                    [Button.inline(f"{mark} {d.name}", f"group_info_{user_id}_{d.id}")]
                )


        if not buttons:
            await event.respond("–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
            return

        await event.respond("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ:", buttons=buttons)
    finally:
        await client.disconnect()


broadcast_jobs = {}

# ---------- –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã ----------
@bot.on(events.CallbackQuery(data=lambda data: data.decode().startswith("group_info_")))
async def handle_group_info(event):
    # –≤ callback-–¥–∞–Ω–Ω—ã—Ö: group_info_<user_id>_<group_id>
    user_id, group_id = map(int, event.data.decode().split("_")[2:])

    # --- –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î ---
    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    try:
        group        = await client.get_entity(group_id)
        account_name = (await client.get_me()).first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    finally:
        await client.disconnect()

    # --- –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ---
    cursor.execute(
        "SELECT broadcast_text, interval_minutes "
        "FROM broadcasts WHERE user_id = ? AND group_id = ?",
        (user_id, group_id)
    )
    broadcast_data = cursor.fetchone()

    # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º job-—ã –≤ APScheduler ---
    jid_one = f"broadcast_{user_id}_{gid_key(group_id)}"
    jid_all = f"broadcastALL_{user_id}_{gid_key(group_id)}"


    has_one = scheduler.get_job(jid_one)
    has_all = scheduler.get_job(jid_all)

    # ---------- —Å—Ç–∞—Ç—É—Å ----------
    if has_one:
        status = "‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è"
    elif has_all:
        status = "‚úÖ –ú–∞—Å—Å–æ–≤–∞—è"
    else:
        status = "‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    # ---------- —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –±–ª–æ–∫–µ ¬´–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç¬ª ----------
    if has_all:
        txt = broadcast_all_text.get((user_id, gid_key(group_id)), "‚Äî")
        text_display = f"üì© **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (–º–∞—Å—Å–æ–≤–∞—è):**\n{txt}"
    elif broadcast_data:
        broadcast_text, interval_minutes = broadcast_data
        text_display = (
            f"üì© **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n{broadcast_text}\n"
            f"‚è≥ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {interval_minutes} –º–∏–Ω—É—Ç"
        )
    else:
        text_display = (
            "üì© **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:** ‚ùå –ù–µ –∑–∞–¥–∞–Ω\n"
            "‚è≥ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** ‚ùå –ù–µ –∑–∞–¥–∞–Ω"
        )

    # ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ----------
    keyboard = [
        [Button.inline("üìù –¢–µ–∫—Å—Ç –∏ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏",
                       f"broadcasttextinterval_{user_id}_{group_id}")],
        [Button.inline("‚úÖ –ù–∞—á–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                       f"startresumebroadcast_{user_id}_{group_id}")],
        [Button.inline("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                       f"stop_accountbroadcast_{user_id}_{group_id}")]
    ]

    # ---------- –æ—Ç–≤–µ—Ç ----------
    await event.respond(
        f"üì¢ **–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.title} "
        f"–æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}:**\n\n"
        f"{text_display}\n"
        f"üü¢ **–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:** {status}",
        buttons=keyboard
    )
  

user_states = {}

@bot.on(events.CallbackQuery(data=lambda data: data.decode().startswith("broadcasttextinterval_")))
async def handle_broadcast_text_interval(event):
    data = event.data.decode()
    user_id, group_id = map(int, data.split("_")[1:])

    async with bot.conversation(event.sender_id) as conv:
        user_states[event.sender_id] = "text_and_interval_waiting"

        await event.respond("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        new_broadcast_text_event = await conv.wait_event(events.NewMessage(from_users=event.sender_id))
        new_broadcast_text = new_broadcast_text_event.text

        await event.respond("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç.")
        try:
            new_interval_minutes_event = await conv.wait_event(events.NewMessage(from_users=event.sender_id))
            new_interval_minutes = int(new_interval_minutes_event.text)

            cursor.execute("SELECT * FROM broadcasts WHERE user_id = ? AND group_id = ?", (user_id, group_id))
            existing_row = cursor.fetchone()

            if existing_row:
                update_broadcast_data(user_id, group_id, new_broadcast_text, new_interval_minutes)
                await event.respond(f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_broadcast_text}\n‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_interval_minutes} –º–∏–Ω—É—Ç.")
            else:
                create_broadcast_data(user_id, group_id, new_broadcast_text, new_interval_minutes)
                await event.respond(f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n{new_broadcast_text}\n‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî {new_interval_minutes} –º–∏–Ω—É—Ç.")

            del user_states[event.sender_id]

        except ValueError:
            await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")

            del user_states[event.sender_id]

def create_broadcast_data(user_id, group_id, broadcast_text, interval_minutes):
    cursor.execute("""
        INSERT INTO broadcasts (user_id, group_id, broadcast_text, interval_minutes, is_active)
        VALUES (?, ?, ?, ?, ?)
    """, (user_id, group_id, broadcast_text, interval_minutes, False))
    conn.commit()

def update_broadcast_data(user_id, group_id, broadcast_text, interval_minutes):
    cursor.execute("""
        UPDATE broadcasts
        SET broadcast_text = ?, interval_minutes = ?
        WHERE user_id = ? AND group_id = ?
    """, (broadcast_text, interval_minutes, user_id, group_id))
    conn.commit()

@bot.on(events.CallbackQuery(data=lambda data: data.decode().startswith("startresumebroadcast_")))
async def start_resume_broadcast(event):
    data = event.data.decode()
    parts = data.split("_")

    if len(parts) < 3:
        await event.respond("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    try:
        user_id = int(parts[1])
        group_id = int(parts[2])
    except ValueError as e:
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    job_id = f"broadcast_{user_id}_{group_id}"
    existing_job = scheduler.get_job(job_id)

    if existing_job:
        await event.respond("‚ö† –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")
        return

    cursor.execute("SELECT broadcast_text, interval_minutes FROM broadcasts WHERE user_id = ? AND group_id = ?", (user_id, group_id))
    row = cursor.fetchone()

    if row:
        broadcast_text, interval_minutes = row
        if not broadcast_text or not interval_minutes or interval_minutes <= 0:
            await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            return

        session_string_row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
        if not session_string_row:
            await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω session_string –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞.")
            return

        session_string = session_string_row[0]
        session = StringSession(session_string)
        client = TelegramClient(session, API_ID, API_HASH)

        await client.connect()

        try:
            group = await client.get_entity(group_id)
            group_title = group.title
        except Exception as e:
            await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
            return
        finally:
            await client.disconnect()

        async def send_broadcast():
            session = StringSession(session_string)
            client = TelegramClient(session, API_ID, API_HASH)

            await client.connect()
            try:
                group = await client.get_entity(group_id)
                await client.send_message(group, broadcast_text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
            finally:
                await client.disconnect()

        scheduler.add_job(
            send_broadcast,
            IntervalTrigger(minutes=interval_minutes),
            id=job_id,
            replace_existing=True
        )

        await event.respond(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group_title}** –Ω–∞—á–∞—Ç–∞!")
        if not scheduler.running:
            scheduler.start()
    else:
        await event.respond("‚ö† –†–∞—Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")

@bot.on(events.CallbackQuery(data=lambda data: data.decode().startswith("stop_accountbroadcast_")))
async def stop_broadcast(event):
    data = event.data.decode()
    try:
        user_id, group_id = map(int, data.split("_")[2:])

    except ValueError as e:
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_id –∏ group_id: {e}")

        return
    session_string = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()[0]
    session = StringSession(session_string)
    client = TelegramClient(session, API_ID, API_HASH)
    await client.connect()
    group = await client.get_entity(group_id)
    job_id = f"broadcast_{user_id}_{group_id}"
    job = scheduler.get_job(job_id)
    if job:
        job.remove()
        cursor.execute("UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?", (False, user_id, group_id))
        conn.commit()

        await event.respond(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group.title}** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        await event.respond(f"‚ö† –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group.title}** –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

user_sessions_phone = {}

@bot.on(events.CallbackQuery(data=b"delete_account"))
async def handle_delete_account(event):
    user_sessions_phone[event.sender_id] = {"step": "awaiting_phone"}
    await event.respond("üì≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

@bot.on(events.NewMessage)
async def handle_user_input(event):
    user_state = user_sessions_phone.get(event.sender_id)

    if user_state and user_state["step"] == "awaiting_phone":
        phone_number = event.text.strip()

        if phone_number.startswith("+") and phone_number[1:].isdigit():
            cursor.execute("SELECT user_id FROM sessions WHERE session_string = ?", (phone_number,))
            user = cursor.fetchone()

            if user:
                cursor.execute("DELETE FROM sessions WHERE session_string = ?", (phone_number,))
                conn.commit()
                await event.respond(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                await event.respond("‚ö† –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            user_sessions_phone.pop(event.sender_id, None)
        else:
            await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å '+'.")

cursor.execute("CREATE TABLE IF NOT EXISTS groups (group_id INTEGER PRIMARY KEY AUTOINCREMENT, group_username TEXT UNIQUE)")
conn.commit()

user_sessions = {}

@bot.on(events.CallbackQuery(data=b"groups"))
async def manage_groups(event):
    user_sessions[event.sender_id] = {"step": "awaiting_group_username"}
    await event.respond("üì≤ –ù–∞–ø–∏—à–∏—Ç–µ @username –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")

@bot.on(events.NewMessage)
async def handle_group_input(event):
    user_state = user_sessions.pop(event.sender_id, None) 

    if user_state and user_state["step"] == "awaiting_group_username":
        group_username = event.text.strip()

        if group_username.startswith("@") and " " not in group_username:  
            try:
                cursor.execute("INSERT INTO groups (group_username) VALUES (?)", (group_username,))
                conn.commit()
                await event.respond(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            except sqlite3.IntegrityError:
                await event.respond("‚ö† –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await event.respond("‚ö† –û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É.")



@bot.on(events.CallbackQuery(data=b"my_groups"))
async def my_groups(event):
    cursor.execute("SELECT group_username FROM groups")
    groups = cursor.fetchall()

    if not groups:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return

    message = "üìë **–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:**\n"

    for group in groups:
        message += f"üìå {group[0]}\n"
        buttons = [
            [Button.inline("‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", b"delete_group")],
            [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã", b"add_all_accounts_to_groups")]
        ]
    await event.respond(message, buttons=buttons)

@bot.on(events.CallbackQuery(data=b"add_all_accounts_to_groups"))
async def add_all_accounts_to_groups(event):
    cursor.execute("SELECT session_string FROM sessions")
    accounts = cursor.fetchall()

    cursor.execute("SELECT group_username FROM groups")
    groups = cursor.fetchall()

    if not accounts:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    if not groups:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return

    group_list = "\n".join([f"üìå {group[0]}" for group in groups])
    await event.respond(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:\n{group_list}")

    for account in accounts:
        session = StringSession(account[0])
        client = TelegramClient(session, API_ID, API_HASH)
        await client.connect()
        try:

            for group in groups:
                await client(JoinChannelRequest(group[0]))
        except Exception as e:
            await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")

user_sessions_deliting = {}

@bot.on(events.CallbackQuery(data=b"delete_group"))
async def handle_delete_group(event):
    user_sessions_deliting[event.sender_id] = {"step": "awaiting_group_username"}
    await event.respond("üì≤ –í–≤–µ–¥–∏—Ç–µ @username –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

@bot.on(events.NewMessage)
async def handle_user_input(event):
    user_state = user_sessions_deliting.get(event.sender_id)

    if user_state and user_state["step"] == "awaiting_group_username":
        group_username = event.text.strip()

        if group_username.startswith("@"):
            cursor.execute("SELECT * FROM groups WHERE group_username = ?", (group_username,))
            group = cursor.fetchone()

            if group:
                cursor.execute("DELETE FROM groups WHERE group_username = ?", (group_username,))
                conn.commit()
                await event.respond(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            else:
                await event.respond("‚ö† –ì—Ä—É–ø–ø–∞ —Å –∏–º–µ–Ω–µ–º {group_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            user_sessions_deliting.pop(event.sender_id, None)
        else:
            await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –≥—Ä—É–ø–ø—ã, –Ω–∞—á–∏–Ω–∞—è —Å '@'.")
            return

async def schedule_account_broadcast(user_id: int, text: str,
                                     min_m: int, max_m: int | None):
    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    if not row:
        return
    sess_str = row[0]

    cli = TelegramClient(StringSession(sess_str), API_ID, API_HASH)
    await cli.connect()

    dialogs = await cli.get_dialogs()
    entities: list[Channel | Chat] = []
    for d in dialogs:
        ent = d.entity

        # 1) –ª–∏—á–∫–∏ / –±–æ—Ç—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not isinstance(ent, (Channel, Chat)):
            continue

        # 2) –æ–±—ã—á–Ω—ã–π broadcast-–∫–∞–Ω–∞–ª (–ª–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π): –ø–æ—Å—Ç–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü
        if isinstance(ent, Channel) and ent.broadcast and not ent.megagroup:
            continue

        # 3) –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø—Ä–∞–≤–æ "send_messages"
        try:
            perms = await cli.get_permissions(ent)
            if hasattr(perms, "send_messages") and not perms.send_messages:
                continue
        except Exception:
            continue        # –Ω–µ —Å–º–æ–≥–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∞ ‚Äî –ª—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å

        entities.append(ent)


        try:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ ¬´send messages¬ª
            perms = await cli.get_permissions(ent)
            if hasattr(perms, "send_messages") and not perms.send_messages:
                continue
        except Exception:
            continue          # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        entities.append(ent)

    await cli.disconnect()
    if not entities:
        return

    # --- —Å—Ç–∞–≤–∏–º job –Ω–∞ –∫–∞–∂–¥—É—é –≥–æ–¥–Ω—É—é –≥—Ä—É–ø–ø—É ---
    for ent in entities:
        gid_key_str = gid_key(ent.id)           # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π id
        job_id = f"broadcastALL_{user_id}_{gid_key_str}"

        scheduler.remove_job(job_id) if scheduler.get_job(job_id) else None

        async def send_message(ss=sess_str, entity=ent, txt=text, job_id=job_id):
            from telethon.errors import ChatAdminRequiredError, ChatWriteForbiddenError
            c = TelegramClient(StringSession(ss), API_ID, API_HASH)
            await c.connect()
            try:
                await c.send_message(entity, txt)
            except (ChatAdminRequiredError, ChatWriteForbiddenError):
                # –Ω–∞—Å –ª–∏—à–∏–ª–∏ –ø—Ä–∞–≤–∞ –ø–∏—Å–∞—Ç—å ‚Äì —Å–Ω–∏–º–∞–µ–º job –∏ —É–±–∏—Ä–∞–µ–º "–≥–∞–ª–æ—á–∫—É"
                scheduler.remove_job(job_id)        # ‚¨Ö –≥–ª–∞–≤–Ω–æ–µ
                broadcast_all_text.pop((user_id, gid_key(entity.id)), None)
            except Exception as e:
                logger.warning("‚ùå –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ %s: %s", entity.id, e)
            finally:
                await c.disconnect()


        base = (min_m + max_m)//2 if max_m else min_m
        jitter = (max_m - min_m)*60//2 if max_m else 0
        trigger = IntervalTrigger(minutes=base, jitter=jitter)

        scheduler.add_job(send_message, trigger,
                          id=job_id,
                          next_run_time=datetime.utcnow(),
                          replace_existing=True)

        broadcast_all_text[(user_id, gid_key_str)] = text

    if not scheduler.running:
        scheduler.start()

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.run_until_disconnected()