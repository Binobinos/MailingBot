import datetime
import logging
import sqlite3
from typing import Dict, List, Union

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from telethon import TelegramClient, events, Button
from telethon.events import NewMessage, CallbackQuery
from telethon.errors import FloodWaitError, ChatWriteForbiddenError, ChatAdminRequiredError
from telethon.errors import SessionPasswordNeededError
from telethon.sessions import StringSession
from telethon.tl.functions.auth import SendCodeRequest
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Channel, Chat  # ‚Üê –î–û–ë–ê–í–ò–õ–ò

from config import API_ID, API_HASH, BOT_TOKEN, ADMIN_ID_LIST, LOG_LEVEL, LOG_FORMAT

logging.basicConfig(format=LOG_FORMAT, level=LOG_LEVEL)

__CallbackQuery = NewMessage.Event
__Message = CallbackQuery.Event
bot: TelegramClient = TelegramClient("bot", API_ID, API_HASH).start(bot_token=BOT_TOKEN)
phone_waiting: Dict[int, bool] = {}  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
code_waiting = {}
password_waiting = {}
user_clients: Dict[int, TelegramClient] = {}  # c
broadcast_all_state = {}  # key = admin_id -> —à–∞–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
# —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã, –∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º broadcastALL
broadcast_all_text = {}  # key = (user_id, group_id) -> text
scheduler = AsyncIOScheduler()
user_sessions_deleting = {}
user_sessions = {}
user_sessions_phone = {}
user_states = {}
broadcast_jobs = {}

conn = sqlite3.connect("sessions.db")
start_cursor = conn.cursor()
start_cursor.execute("""
CREATE TABLE IF NOT EXISTS pre_groups (
    group_id INTEGER PRIMARY KEY AUTOINCREMENT, 
    group_username TEXT UNIQUE)""")

start_cursor.execute("""
CREATE TABLE IF NOT EXISTS groups (
    group_id INTEGER , 
    group_username TEXT,
    user_id INTEGER,
    UNIQUE(user_id, group_username))""")

start_cursor.execute("""
CREATE TABLE IF NOT EXISTS sessions (
    user_id INTEGER PRIMARY KEY,
    session_string TEXT)""")

start_cursor.execute("""
CREATE TABLE IF NOT EXISTS broadcasts ( 
    id INTEGER PRIMARY KEY AUTOINCREMENT, 
    user_id INTEGER, group_id INTEGER, 
    session_string TEXT, 
    broadcast_text TEXT, 
    interval_minutes INTEGER,
    is_active BOOLEAN,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (group_id) REFERENCES groups(id))""")

start_cursor.execute("""
CREATE TABLE IF NOT EXISTS send_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    group_id INTEGER,
    group_name TEXT,
    sent_at TEXT,
    message_text TEXT);""")

conn.commit()
start_cursor.close()


# ------------------------------------------------------------------
def gid_key(value: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç abs(id).  –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø (-100...) –∏ –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ ¬´–∫–ª—é—á¬ª."""
    return abs(value)


def broadcast_status_emoji(user_id: int,
                           group_id: int) -> str:
    gid_key_str = gid_key(group_id)
    return "‚úÖ" if gid_key_str in get_active_broadcast_groups(user_id) else "‚ùå"


def get_active_broadcast_groups(user_id: int) -> List[int]:
    active = set()
    cursor = conn.cursor()
    cursor.execute("""SELECT group_id FROM broadcasts WHERE is_active = ? AND user_id = ?""", (True, user_id))
    broadcasts = cursor.fetchall()
    for job in broadcasts:
        active.add(job[0])
    cursor.close()
    return list(active)


def create_broadcast_data(user_id: int,
                          group_id: int,
                          broadcast_text: str,
                          interval_minutes: int) -> None:
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO broadcasts (user_id, group_id, broadcast_text, interval_minutes, is_active)
        VALUES (?, ?, ?, ?, ?)
    """, (user_id, gid_key(group_id), broadcast_text, interval_minutes, False))
    conn.commit()
    cursor.close()


def update_broadcast_data(user_id: int,
                          group_id: int,
                          broadcast_text: str,
                          interval_minutes: int) -> None:
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE broadcasts
        SET broadcast_text = ?, interval_minutes = ?
        WHERE user_id = ? AND group_id = ?
    """, (broadcast_text, interval_minutes, user_id, gid_key(group_id)))
    conn.commit()
    cursor.close()


async def schedule_account_broadcast(user_id: int,
                                     text: str,
                                     min_m: int,
                                     max_m: Union[int] = None) -> None:
    """–°—Ç–∞–≤–∏—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç jobs broadcastALL_<user>_<gid> —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤,
    –∫—É–¥–∞ –∞–∫–∫–∞—É–Ω—Ç —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å."""
    # --- —Å–µ—Å—Å–∏—è ---
    cursor = conn.cursor()
    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    cursor.execute("""UPDATE broadcasts SET broadcast_text = ? WHERE user_id = ?""", (text, user_id))
    if not row:
        return
    sess_str = row[0]

    client = TelegramClient(StringSession(sess_str), API_ID, API_HASH)
    await client.connect()

    # --- —Å–æ–±–∏—Ä–∞–µ–º ¬´—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ¬ª —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã ---
    groups = cursor.execute("""SELECT group_username, group_id FROM groups WHERE user_id = ?""", (user_id,))
    ok_entities: list[Channel | Chat] = []
    for group in groups:
        ent = await client.get_entity(group[0])
        try:
            if not isinstance(ent, (Channel, Chat)):
                logging.info(f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {ent} —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –õ–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –±–æ—Ç")
                continue
            if isinstance(ent, Channel) and ent.broadcast and not ent.megagroup:
                logging.info(f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {ent} —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –≤–∏—Ç—Ä–∏–Ω–∞-–∫–∞–Ω–∞–ª")
                continue
        except Exception as error:
            logging.warning(f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {error}")
            continue
        ok_entities.append(ent)

    if not ok_entities:
        print()
        logging.info(f"–ù–µ—Ç—É –∑–∞–¥–∞—á –≤—ã—Ö–æ–¥–∏–º")
        return

    for ent in ok_entities:
        print(ent)
        job_id = f"broadcastALL_{user_id}_{gid_key(ent.id)}"
        cursor.execute("UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                       (True, user_id, gid_key(ent.id)))
        if scheduler.get_job(job_id):
            logging.info(f"–£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É")
            scheduler.remove_job(job_id)

        async def send_message(
                ss=sess_str,
                entity=ent,
                jobs_id=job_id,
                start_text=text
        ):
            c = TelegramClient(StringSession(ss), API_ID, API_HASH)
            await c.connect()
            my_cursor = conn.cursor()
            my_cursor.execute("""SELECT broadcast_text FROM broadcasts WHERE group_id = ? AND user_id = ?""",
                              (entity.id, user_id))
            txt = my_cursor.fetchone()
            if txt:
                txt = txt[0]
            else:
                txt = start_text
            try:
                await c.send_message(entity, txt)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º {entity} {txt}")
                my_cursor.execute(
                    """INSERT INTO send_history (
                                user_id, 
                                group_id, 
                                group_name, 
                                sent_at, 
                                message_text) 
                            VALUES (?, ?, ?, ?, ?)""",
                    (user_id, entity.id, entity.title if hasattr(entity, 'title') else '',
                     datetime.datetime.now().isoformat(),
                     txt)
                )
                my_cursor.execute("UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                  (False, user_id, gid_key(entity.id)))
            except (ChatWriteForbiddenError, ChatAdminRequiredError) as e:
                logging.info(f"–°–Ω–∏–º–∞–µ–º –∑–∞–¥–∞—á—É {jobs_id} ‚Äî –Ω–µ—Ç –ø—Ä–∞–≤ –ø–∏—Å–∞—Ç—å: {e}")
                scheduler.remove_job(jobs_id)
                my_cursor.execute("UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                  (False, user_id, gid_key(entity.id)))
            finally:
                await c.disconnect()
                conn.commit()
                my_cursor.close()

        base = (min_m + max_m) // 2 if max_m else min_m
        jitter = (max_m - min_m) * 60 // 2 if max_m else 0
        trigger = IntervalTrigger(minutes=base, jitter=jitter)
        next_run = datetime.datetime.now() + datetime.timedelta(
            minutes=((max_m - min_m) / len(ok_entities) if max_m else min_m))
        logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å")
        scheduler.add_job(
            send_message,
            trigger,
            id=job_id,
            next_run_time=next_run,
            replace_existing=True,
        )
    if not scheduler.running:
        logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏")
        scheduler.start()

    await client.disconnect()
    if not ok_entities:
        return


# ------------------------------------------------------------------
@bot.on(NewMessage(pattern="/start"))
async def start(event: __Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
    """
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    if event.sender_id in ADMIN_ID_LIST:
        buttons = [
            [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç üë§", b"add_account"), Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É üë•", b"groups")],
            [Button.inline("üë§ –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã", b"my_accounts"), Button.inline("üìë –ú–æ–∏ –≥—Ä—É–ø–ø—ã", b"my_groups")],
            [Button.inline("üïó –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏", b"show_history")]
        ]
        await event.respond("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω!", buttons=buttons)
    else:
        await event.respond("‚õî –ó–∞–ø—Ä–µ—â–µ–Ω–æ!")


# ------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ -------
@bot.on(CallbackQuery(data=b"add_account"))
async def add_account(event: __CallbackQuery) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç
    """
    logging.info(f"–í—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞")
    user_id: int = event.sender_id
    phone_waiting[user_id] = True
    await event.respond("üì≤ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `+79000000000`")


@bot.on(NewMessage(func=lambda e: e.sender_id in phone_waiting and e.text.startswith("+") and e.text[1:].isdigit()))
async def send_code_for_phone(event: __Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
    """
    user_id: int = event.sender_id
    phone_number: str = event.text.strip()
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é {user_id} –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω {phone_number} –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    user_clients[user_id] = TelegramClient(StringSession(), API_ID, API_HASH)
    await user_clients[user_id].connect()

    await event.respond("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")

    try:
        await user_clients[user_id].send_code_request(phone_number)
        code_waiting[user_id] = phone_number
        del phone_waiting[user_id]
        await event.respond("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞:")
        logging.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        if isinstance(e, (SendCodeRequest, FloodWaitError)):
            sec_time = int(str(e).split()[3])
            message = (f"‚ö† –¢–µ–ª–µ–≥—Ä–∞–º–º –∑–∞–±–∞–Ω–∏–ª –∑–∞ –±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã. "
                       f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {(a := sec_time // 3600)} –ß–∞—Å–æ–≤ {(b := ((sec_time - a * 3600) // 60))}"
                       f" –ú–∏–Ω—É—Ç {sec_time - a * 3600 - b * 60} –°–µ–∫—É–Ω–¥")
            await event.respond(message)
            logging.error(message)
        else:
            phone_waiting.pop(user_id, None)
            user_clients.pop(user_id, None)
            logging.error(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await event.respond(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")


@bot.on(NewMessage(func=lambda e: e.sender_id in code_waiting and e.text.isdigit() and e.sender_id not in broadcast_all_state))
async def get_code(event: __Message) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    code = event.text.strip()
    user_id = event.sender_id
    phone_number = code_waiting[user_id]
    cursor = conn.cursor()
    try:
        await user_clients[user_id].sign_in(phone_number, code)
        session_string = user_clients[user_id].session.save()
        me = await user_clients[user_id].get_me()

        cursor.execute("INSERT INTO sessions (user_id, session_string) VALUES (?, ?)", (me.id, session_string))
        conn.commit()

        del code_waiting[user_id]
        del user_clients[user_id]
        await event.respond("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    except SessionPasswordNeededError:
        password_waiting[user_id] = {"waiting": True, "last_message_id": event.message.id}
        await event.respond("‚ö† –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å:")
    except Exception as e:
        del code_waiting[user_id]
        user_clients.pop(user_id, None)
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
        await event.respond(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")
    finally:
        cursor.close()


@bot.on(NewMessage(func=lambda e: e.sender_id in password_waiting and e.sender_id not in user_states and e.sender_id not in broadcast_all_state))
async def get_password(event: __Message) -> None:
    user_id = event.sender_id
    if password_waiting[user_id]["waiting"] and event.message.id > password_waiting[user_id]["last_message_id"]:
        password = event.text.strip()
        cursor = conn.cursor()
        try:
            await user_clients[user_id].sign_in(password=password)
            me = await user_clients[user_id].get_me()
            session_string = user_clients[user_id].session.save()

            cursor.execute("INSERT INTO sessions (user_id, session_string) VALUES (?, ?)", (me.id, session_string))
            conn.commit()

            del password_waiting[user_id]
            del user_clients[user_id]
            await event.respond("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")
        finally:
            cursor.close()


# ------- –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ -------
@bot.on(CallbackQuery(data=b"my_accounts"))
async def my_accounts(event: __CallbackQuery) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, session_string FROM sessions")
    accounts = cursor.fetchall()
    cursor.close()
    if not accounts:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    buttons = []
    for user_id, session_string in accounts:
        session = StringSession(session_string)
        client = TelegramClient(session, API_ID, API_HASH)
        await client.connect()
        try:
            me = await client.get_me()
            username = me.first_name if me.first_name else "–ë–µ–∑ –Ω–∏–∫–∞"
            buttons.append([Button.inline(f"üë§ {username}", f"account_info_{user_id}")])
        except Exception as e:
            buttons.append([Button.inline(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {e}", f"error_{user_id}")])
    await event.respond("üì± **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:**", buttons=buttons)


@bot.on(CallbackQuery(data=lambda data: data.decode().startswith("account_info_")))
async def handle_account_button(event: __CallbackQuery) -> None:
    user_id = int(event.data.decode().split("_")[2])
    cursor = conn.cursor()
    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    try:
        me = await client.get_me()
        username = me.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        phone = me.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        groups = cursor.execute("SELECT group_id, group_username FROM groups WHERE user_id = ?", (user_id,))

        active_gids = get_active_broadcast_groups(user_id)
        lines = []
        for group in groups:
            lines.append(f"{'‚úÖ' if gid_key(group[0]) in active_gids else '‚ùå'} {group[1]}")
        group_list = "\n".join(lines)
        if not group_list:
            group_list = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø."

        mass_active = "üü¢ –í–ö–õ" if active_gids else "üî¥ –í–´–ö–õ"
        buttons = [
            [
                Button.inline("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", f"listOfgroups_{user_id}")
            ],
            [Button.inline("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ —á–∞—Ç—ã", f"broadcastAll_{user_id}"),
             Button.inline("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É", f"StopBroadcastAll_{user_id}")],
            [Button.inline("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "delete_account")]
        ]

        await event.respond(
            f"üì¢ **–ú–µ–Ω—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}:**\n"
            f"üöÄ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:** {mass_active}\n\n"
            f"üìå **–ò–º—è:** {username}\n"
            f"üìû **–ù–æ–º–µ—Ä:** `+{phone}`\n\n"
            f"üìù **–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:**\n{group_list}",
            buttons=buttons
        )
    finally:
        await client.disconnect()
        cursor.close()


# ---------- –ú–ï–ù–Æ ¬´–†–∞—Å—Å—ã–ª–∫–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã¬ª ----------
@bot.on(CallbackQuery(data=lambda d: d.decode().startswith("broadcastAll_")))
async def broadcast_all_menu(event: __CallbackQuery) -> None:
    admin_id = event.sender_id
    target_user_id = int(event.data.decode().split("_")[1])
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —à–ª—ë–º
    broadcast_all_state[admin_id] = {"user_id": target_user_id}

    keyboard = [
        [Button.inline("‚è≤Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã", f"sameIntervalAll_{target_user_id}")],
        [Button.inline("üé≤ –†–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (25-35)", f"diffIntervalAll_{target_user_id}")]
    ]
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:", buttons=keyboard)


# ---------- –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(CallbackQuery(data=lambda d: d.decode().startswith("sameIntervalAll_")))
async def same_interval_start(event: __CallbackQuery) -> None:
    admin_id = event.sender_id
    uid = int(event.data.decode().split("_")[1])
    broadcast_all_state[admin_id] = {"user_id": uid, "mode": "same", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è **–≤—Å–µ—Ö** –≥—Ä—É–ø–ø —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")


# ---------- —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(CallbackQuery(data=lambda d: d.decode().startswith("diffIntervalAll_")))
async def diff_interval_start(event: __CallbackQuery) -> None:
    admin_id = event.sender_id
    uid = int(event.data.decode().split("_")[1])
    broadcast_all_state[admin_id] = {"user_id": uid, "mode": "diff", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ—Ç–æ–º —Å–ø—Ä–æ—à—É –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:")


# ---------- –º–∞—Å—Ç–µ—Ä-–¥–∏–∞–ª–æ–≥ (—Ç–µ–∫—Å—Ç ‚Üí –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã) ----------
@bot.on(CallbackQuery(func=lambda e: e.sender_id in broadcast_all_state))
async def broadcast_all_dialog(event: __Message) -> None:
    st = broadcast_all_state[event.sender_id]

    # —à–∞–≥ 1 ‚Äî –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç
    if st["step"] == "text":
        st["text"] = event.text
        if st["mode"] == "same":
            st["step"] = "interval"
            await event.respond("‚è≤Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω—É—Ç—ã, –æ–¥–Ω–æ —á–∏—Å–ª–æ):")
        else:
            st["step"] = "min"
            await event.respond("üî¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if st["mode"] == "same" and st["step"] == "interval":
        min_time = int(event.text)
        if min_time <= 0:
            await event.respond("‚ö† –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        await schedule_account_broadcast(st["user_id"], st["text"], min_time, None)
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: –∫–∞–∂–¥—ã–µ {min_time} –º–∏–Ω.")
        broadcast_all_state.pop(event.sender_id, None)
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 2 (min)
    if st["mode"] == "diff" and st["step"] == "min":
        st["min"] = int(event.text)
        if st["min"] <= 0:
            await event.respond("‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        st["step"] = "max"
        await event.respond("üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 3 (max) + –∑–∞–ø—É—Å–∫
    if st["mode"] == "diff" and st["step"] == "max":
        max_m = int(event.text)
        if max_m <= st["min"]:
            await event.respond("‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.")
            return
        await schedule_account_broadcast(st["user_id"], st["text"], st["min"], max_m)
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: —Å–ª—É—á–∞–π–Ω–æ –∫–∞–∂–¥—ã–µ {st['min']}-{max_m} –º–∏–Ω.")
        broadcast_all_state.pop(event.sender_id, None)


@bot.on(CallbackQuery(data=lambda data: data.decode().startswith("listOfgroups_")))
async def handle_groups_list(event: __CallbackQuery) -> None:
    user_id = int(event.data.decode().split("_")[1])
    cursor = conn.cursor()
    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    try:
        dialogs = cursor.execute("SELECT group_id, group_username FROM groups WHERE user_id = ?", (user_id,))
        active = get_active_broadcast_groups(user_id)

        buttons = []
        for dialog in dialogs:
            print(dialog)
            buttons.append(
                [Button.inline(f"{"‚úÖ" if dialog[0] in active else "‚ùå"} {dialog[1]}",
                               f"group_info_{user_id}_{gid_key(dialog[0])}")]
            )
        cursor.close()
        if not buttons:
            await event.respond("–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
            return

        await event.respond("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ:", buttons=buttons)
    finally:
        await client.disconnect()


# ---------- –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã ----------
@bot.on(CallbackQuery(data=lambda data: data.decode().startswith("group_info_")))
async def handle_group_info(event: __CallbackQuery) -> None:
    # –≤ callback-–¥–∞–Ω–Ω—ã—Ö: group_info_<user_id>_<group_id>
    user_id, group_id = map(int, event.data.decode().split("_")[2:])
    cursor = conn.cursor()
    # --- –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î ---
    row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    account_name = "–ë–µ–∑ –∏–º–µ–Ω–∏"
    group_name = "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"
    try:
        cursor.execute(
            "SELECT group_username FROM groups WHERE user_id = ? AND group_id = ?",
            (user_id, group_id)
        )
        group_row = cursor.fetchone()
        if group_row:
            group_name = group_row[0]
    except Exception as error:
        logging.error(f"–û—à–∏–±–∫–∞ {error}")
    try:
        account_name = (await client.get_me()).first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    except ValueError:
        logging.info(f"–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —É –∞–∫–∫–∞—É–Ω—Ç–∞")
    finally:
        await client.disconnect()

    # --- –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ---
    cursor.execute("""SELECT broadcast_text, interval_minutes FROM broadcasts WHERE user_id = ? AND group_id = ?""",
                   (user_id, gid_key(group_id)))
    broadcast_data = cursor.fetchone()
    cursor.close()
    # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º job-—ã –≤ APScheduler ---
    jid_one = f"broadcast_{user_id}_{gid_key(group_id)}"
    jid_all = f"broadcastALL_{user_id}_{gid_key(group_id)}"

    has_one = scheduler.get_job(jid_one)
    has_all = scheduler.get_job(jid_all)

    # ---------- —Å—Ç–∞—Ç—É—Å ----------
    if has_one:
        status = "‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è"
    elif has_all:
        status = "‚úÖ –ú–∞—Å—Å–æ–≤–∞—è"
    else:
        status = "‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    # ---------- —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –±–ª–æ–∫–µ ¬´–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç¬ª ----------
    if has_all:
        txt = broadcast_all_text.get((user_id, gid_key(group_id)), "‚Äî")
        text_display = f"üì© **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (–º–∞—Å—Å–æ–≤–∞—è):**\n{txt}"
    elif broadcast_data:
        broadcast_text, interval_minutes = broadcast_data
        text_display = (
            f"üì© **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n{broadcast_text}\n"
            f"‚è≥ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {interval_minutes} –º–∏–Ω—É—Ç"
        )
    else:
        text_display = (
            "üì© **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:** ‚ùå –ù–µ –∑–∞–¥–∞–Ω\n"
            "‚è≥ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** ‚ùå –ù–µ –∑–∞–¥–∞–Ω"
        )

    # ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ----------
    keyboard = [
        [Button.inline("üìù –¢–µ–∫—Å—Ç –∏ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏",
                       f"broadcasttextinterval_{user_id}_{gid_key(group_id)}")],
        [Button.inline("‚úÖ –ù–∞—á–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                       f"startresumebroadcast_{user_id}_{gid_key(group_id)}")],
        [Button.inline("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                       f"stop_accountbroadcast_{user_id}_{gid_key(group_id)}")]
    ]

    # ---------- –æ—Ç–≤–µ—Ç ----------
    await event.respond(
        f"üì¢ **–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} "
        f"–æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}:**\n\n"
        f"{text_display}\n"
        f"üü¢ **–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:** {status}",
        buttons=keyboard
    )


@bot.on(CallbackQuery(data=lambda data: data.decode().startswith("broadcasttextinterval_")))
async def handle_broadcast_text_interval(event: __CallbackQuery) -> None:
    data = event.data.decode()
    user_id, group_id = map(int, data.split("_")[1:])
    async with bot.conversation(event.sender_id) as conv:
        user_states[event.sender_id] = "text_and_interval_waiting"
        cursor = conn.cursor()
        await event.respond("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        new_broadcast_text_event = await conv.wait_event(events.NewMessage(from_users=event.sender_id))
        new_broadcast_text = new_broadcast_text_event.text

        await event.respond("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç.")
        try:
            new_interval_minutes_event = await conv.wait_event(events.NewMessage(from_users=event.sender_id))
            new_interval_minutes = int(new_interval_minutes_event.text)

            cursor.execute("SELECT * FROM broadcasts WHERE user_id = ? AND group_id = ?", (user_id, gid_key(group_id)))
            existing_row = cursor.fetchone()
            if existing_row:
                update_broadcast_data(user_id, gid_key(group_id), new_broadcast_text, new_interval_minutes)
                await event.respond(
                    f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_broadcast_text}\n"
                    f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_interval_minutes} –º–∏–Ω—É—Ç.")
            else:
                create_broadcast_data(user_id, gid_key(group_id), new_broadcast_text, new_interval_minutes)
                await event.respond(
                    f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n{new_broadcast_text}\n‚è≥"
                    f" –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî {new_interval_minutes} –º–∏–Ω—É—Ç.")

            del user_states[event.sender_id]

        except ValueError:
            await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")

            del user_states[event.sender_id]
        finally:
            cursor.close()


@bot.on(CallbackQuery(data=lambda data: data.decode().startswith("startresumebroadcast_")))
async def start_resume_broadcast(event: __CallbackQuery) -> None:
    data = event.data.decode()
    parts = data.split("_")

    if len(parts) < 3:
        await event.respond("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    try:
        user_id = int(parts[1])
        group_id = int(parts[2])
    except ValueError as e:
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    cursor = conn.cursor()
    job_id = f"broadcast_{user_id}_{gid_key(group_id)}"
    existing_job = scheduler.get_job(job_id)

    if existing_job:
        await event.respond("‚ö† –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")
        return

    cursor.execute("SELECT broadcast_text, interval_minutes FROM broadcasts WHERE user_id = ? AND group_id = ?",
                   (user_id, gid_key(group_id)))
    cursor.execute("""
        UPDATE broadcasts 
        SET is_active = ? 
        WHERE user_id = ? AND group_id = ?
    """, (True, user_id, gid_key(group_id)))
    conn.commit()
    row = cursor.execute("SELECT broadcast_text, interval_minutes FROM broadcasts WHERE user_id = ? AND group_id = ?",
                         (user_id, gid_key(group_id))).fetchone()

    if row:
        broadcast_text, interval_minutes = row
        if not broadcast_text or not interval_minutes or interval_minutes <= 0:
            await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            return

        session_string_row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?",
                                            (user_id,)).fetchone()
        if not session_string_row:
            await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω session_string –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞.")
            return

        session_string = session_string_row[0]
        session = StringSession(session_string)
        client = TelegramClient(session, API_ID, API_HASH)
        await client.connect()

        async def send_broadcast(cursors=cursor,
                                 user_ids=user_id,
                                 broadcast_texts=broadcast_text,
                                 clients=client):

            await clients.connect()
            username = cursors.execute(
                """SELECT group_username FROM groups WHERE user_id = ? AND group_id = ?""",
                (user_ids, group_id)).fetchone()[0]
            try:
                groups = await clients.get_entity(username)
            except Exception as error:
                logging.error(f"–û—à–∏–±–∫–∞ {error}")
                return
            try:
                await clients.send_message(groups, broadcast_texts)
                cursors.execute(
                    """INSERT INTO send_history (
                                user_id, 
                                group_id, 
                                group_name, 
                                sent_at, 
                                message_text) 
                            VALUES (?, ?, ?, ?, ?)""",
                    (user_id, groups.id, groups.title if hasattr(groups, 'title') else '',
                     datetime.datetime.now().isoformat(),
                     broadcast_texts)
                )
                cursors.execute("UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                (False, user_ids, gid_key(groups.id)))
            except Exception as error:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {error}")
                cursors.execute("UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                (False, user_ids, gid_key(groups.id)))
            finally:
                await clients.disconnect()

        scheduler.add_job(
            send_broadcast,
            IntervalTrigger(minutes=interval_minutes),
            id=job_id,
            replace_existing=True
        )

        await event.respond(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
        if not scheduler.running:
            scheduler.start()
    else:
        await event.respond("‚ö† –†–∞—Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")
    cursor.close()


@bot.on(CallbackQuery(data=lambda data: data.decode().startswith("stop_accountbroadcast_")))
async def stop_broadcast(event: __CallbackQuery) -> None:
    data = event.data.decode()
    try:
        user_id, group_id = map(int, data.split("_")[2:])
    except ValueError as e:
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_id –∏ group_id: {e}")
        return
    cursor = conn.cursor()
    session_string = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()[0]
    session = StringSession(session_string)
    client = TelegramClient(session, API_ID, API_HASH)
    await client.connect()
    groups = cursor.execute("SELECT group_username FROM groups WHERE group_id = ?", (group_id,)).fetchone()[0]
    group = await client.get_entity(groups)
    job_id = f"broadcast_{user_id}_{groups}"
    job = scheduler.get_job(job_id)
    if job:
        job.remove()
        cursor.execute("UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                       (False, user_id, gid_key(groups)))
        conn.commit()
        await event.respond(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group.title}** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        await event.respond(f"‚ö† –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group.title}** –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    cursor.close()


@bot.on(CallbackQuery(data=lambda data: data.decode().startswith("StopBroadcastAll_")))
async def stop_broadcast_all(event: __CallbackQuery) -> None:
    data = event.data.decode()
    try:
        user_id = int(data.split("_")[1])
    except ValueError as e:
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_id –∏ group_id: {e}")
        return
    cursor = conn.cursor()
    session_string = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()[0]
    session = StringSession(session_string)
    client = TelegramClient(session, API_ID, API_HASH)
    await client.connect()
    groups = cursor.execute("SELECT group_username, group_id FROM broadcasts WHERE user_id = ? AND is_active = ?",
                            (user_id, True))
    msg = ["‚õî **–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏**:\n\n"]
    for group_ in groups:
        job_id = f"broadcastALL_{user_id}_{gid_key(group_[0])}"
        job = scheduler.get_job(job_id)
        if job:
            job.remove()
            cursor.execute("UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                           (False, user_id, gid_key(group_[1])))
            conn.commit()
            msg.append(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group_[0]}** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            msg.append(f"‚ö† –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{group_[0]}** –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    await event.respond("\n".join(msg))
    cursor.close()


@bot.on(CallbackQuery(data=b"delete_account"))
async def handle_delete_account(event: __CallbackQuery) -> None:
    user_sessions_phone[event.sender_id] = {"step": "awaiting_phone"}
    await event.respond("üì≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")


@bot.on(CallbackQuery(func=lambda event: (user_state := user_sessions_phone.get(event.sender_id)) and user_state["step"] == "awaiting_phone"))
async def handle_user_input(event: __Message):
    phone_number = event.text.strip()
    if phone_number.startswith("+") and phone_number[1:].isdigit():
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM sessions WHERE session_string = ?", (phone_number,))
        user = cursor.fetchone()

        if user:
            cursor.execute("DELETE FROM sessions WHERE session_string = ?", (phone_number,))
            conn.commit()
            logging.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            await event.respond(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            logging.warning(f"–ê–∫–∫–∞—É–Ω—Ç {user} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await event.respond("‚ö† –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        user_sessions_phone.pop(event.sender_id, None)
        cursor.close()
    else:
        logging.error(f"–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
        await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å '+'.")


@bot.on(CallbackQuery(data=b"groups"))
async def manage_groups(event: __CallbackQuery) -> None:
    user_sessions[event.sender_id] = {"step": "awaiting_group_username"}
    await event.respond("üì≤ –ù–∞–ø–∏—à–∏—Ç–µ @username –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")


@bot.on(events.NewMessage(func=lambda event: (user_state := user_sessions.pop(event.sender_id, None)) and user_state["step"] == "awaiting_group_username"))
async def handle_group_input(event: __Message) -> None:
    group_username = event.text.strip()

    if group_username.startswith("@") and " " not in group_username:
        cursor = conn.cursor()
        try:
            ids = await bot.get_entity(group_username)
            cursor.execute("INSERT INTO pre_groups (group_username, group_id) VALUES (?, ?)",
                           (group_username, ids.id))
            conn.commit()
            await event.respond(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        except sqlite3.IntegrityError:
            await event.respond("‚ö† –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            cursor.close()
    else:
        await event.respond("‚ö† –û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É.")


@bot.on(CallbackQuery(data=b"my_groups"))
async def my_groups(event: __CallbackQuery) -> None:
    cursor = conn.cursor()
    cursor.execute("SELECT group_id, group_username FROM pre_groups", )
    groups = cursor.fetchall()
    cursor.close()
    if not groups:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return
    buttons = [
        [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã", b"add_all_accounts_to_groups"),
         Button.inline("‚úî –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã", b"add_all_groups", )],
        [Button.inline("‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", b"delete_group")],
    ]

    message = "üìë **–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:**\n"
    for group in groups:
        print(group)
        message += f"{broadcast_status_emoji(event.sender_id, group[0])} {group[1]}\n"
    await event.respond(message, buttons=buttons)


@bot.on(CallbackQuery(data=b"add_all_accounts_to_groups"))
async def add_all_accounts_to_groups(event: __CallbackQuery) -> None:
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, session_string FROM sessions")
    accounts = cursor.fetchall()

    cursor.execute("SELECT group_id, group_username FROM pre_groups")
    groups = cursor.fetchall()
    if not accounts:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    if not groups:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return

    for account in accounts:
        session = StringSession(account[1])
        client = TelegramClient(session, API_ID, API_HASH)
        await client.connect()
        try:
            for group in groups:
                try:
                    await client(JoinChannelRequest(group[1]))
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ {e}")
                cursor.execute("""INSERT OR IGNORE INTO groups 
                                        (user_id, group_id, group_username) 
                                        VALUES (?, ?, ?)""", (account[0], group[0], group[1]))
                logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—É ({account[0], group[0], group[1]})")
        except Exception as e:
            await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
    group_list = "\n".join([f"üìå {group[1]}" for group in groups])
    await event.respond(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:\n{group_list}")
    conn.commit()
    cursor.close()


@bot.on(CallbackQuery(data=b"add_all_groups"))
async def add_all_accounts_to_groups(event: __CallbackQuery) -> None:
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, session_string FROM sessions")
    accounts = cursor.fetchall()

    cursor.execute("SELECT group_id, group_username FROM pre_groups")
    groups = cursor.fetchall()
    if not accounts:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    if not groups:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return

    for account in accounts:
        session = StringSession(account[1])
        client = TelegramClient(session, API_ID, API_HASH)
        await client.connect()
        for group in await client.get_dialogs():
            ent = group.entity
            if not isinstance(ent, (Channel, Chat)):
                logging.info(f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {ent} —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –õ–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –±–æ—Ç")
                continue

            if isinstance(ent, Channel) and ent.broadcast and not ent.megagroup:
                logging.info(f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {ent} —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –≤–∏—Ç—Ä–∏–Ω–∞-–∫–∞–Ω–∞–ª")
                continue
            logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É")
            cursor.execute(f"""INSERT OR IGNORE INTO pre_groups 
                                        (group_id, group_username) 
                                        VALUES (?, ?)""", (ent.id, ent.title))
    conn.commit()
    cursor.close()
    await event.respond("‚úÖ –í—Å–µ –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã")


@bot.on(CallbackQuery(data=b"delete_group"))
async def handle_delete_group(event: __CallbackQuery) -> None:
    user_sessions_deleting[event.sender_id] = {"step": "awaiting_group_username"}
    await event.respond("üì≤ –í–≤–µ–¥–∏—Ç–µ @username –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")


@bot.on(NewMessage(func=lambda event: (user_state := user_sessions_deleting.get(event.sender_id)) and user_state["step"] == "awaiting_group_username"))
async def handle_user_input(event: __Message) -> None:
    group_username = event.text.strip()

    if group_username.startswith("@"):
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM groups WHERE group_username = ?", (group_username,))
        group = cursor.fetchone()

        if group:
            cursor.execute("DELETE FROM groups WHERE group_username = ?", (group_username,))
            conn.commit()
            await event.respond(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        else:
            await event.respond("‚ö† –ì—Ä—É–ø–ø–∞ —Å –∏–º–µ–Ω–µ–º {group_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        user_sessions_deleting.pop(event.sender_id, None)
        cursor.close()
    else:
        await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –≥—Ä—É–ø–ø—ã, –Ω–∞—á–∏–Ω–∞—è —Å '@'.")
        return


# ---------------------------------------------------------------
@bot.on(CallbackQuery(data=lambda data: data.decode().startswith("show_history")))
async def show_history(event: __CallbackQuery) -> None:
    cursor = conn.cursor()
    cursor.execute("""
            SELECT group_name, sent_at, message_text
            FROM send_history
            ORDER BY sent_at DESC
            LIMIT 10
        """)
    rows = cursor.fetchall()
    cursor.close()
    if not rows:
        await event.respond("‚ùå –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç–∞.")
        return
    msg = "üïó **10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:**\n\n"
    num = 1
    for group_name, sent_at, message_text in rows:
        msg += f"üìå‚Ññ{num}, –ì—Ä—É–ø–ø–∞ - **{group_name}**\nüïì –í—Ä–µ–º—è - **{sent_at}**\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ - **{message_text}**\n\n"
        num += 1
    await event.respond(msg)


# ---------------------------------------------------------------
if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.run_until_disconnected()
    end_cursor = conn.cursor()
    end_cursor.execute("""DELETE FROM broadcasts WHERE is_active = ?""", (True,))
    end_cursor.execute("""DELETE FROM broadcasts WHERE is_active = ?""", (False,))
    end_cursor.close()
    conn.close()
